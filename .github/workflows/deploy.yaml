name: Deploy
on: [push, pull_request]
jobs:
  build_packages:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    env:
      TEST_COMMAND: python -c 'import bx, bx.align, bx.align.sitemask, bx.align.tools, bx.arrays, bx.bbi, bx.cookbook, bx.intervals, bx.intervals.operations, bx.intseq, bx.misc, bx.motif, bx.motif.io, bx.motif.logo, bx.phylo, bx.pwm, bx.seq, bx.tabular, bx_extras'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install required Python packages
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install 'cibuildwheel>=2.0.0a4' twine
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BEFORE_BUILD_LINUX: yum install -y zlib-devel
          # If there is no wheel for numpy on macOS (e.g. for PyPy3.6), we need
          # to build it using OpenBLAS (both before building the wheel and when
          # testing it), see
          # https://github.com/numpy/numpy/issues/15947#issuecomment-683355728
          CIBW_BEFORE_BUILD_MACOS: |
            brew install openblas && cat > ~/.numpy-site.cfg <<EOF
            [openblas]
            libraries = openblas
            library_dirs = $(brew --prefix openblas)/lib
            include_dirs = $(brew --prefix openblas)/include
            runtime_library_dirs = $(brew --prefix openblas)/lib
            EOF
          CIBW_SKIP: '{cp,pp}27-* {cp,pp}35-*'
          CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}
      - name: Build sdist
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install build
          python -m build --sdist
          python -m venv test_venv
          . test_venv/bin/activate
          python -m pip install dist/*.tar.gz
          ${{ env.TEST_COMMAND }}
      - name: Check packages
        run: twine check dist/*
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: dist/

  upload_pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.repository_owner == 'bxlab'
    needs: build_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: packages
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
